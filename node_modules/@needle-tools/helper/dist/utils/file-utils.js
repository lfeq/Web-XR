import { copyFileSync, existsSync, mkdirSync, readFileSync, readdirSync, rmdirSync, statSync, unlinkSync } from "fs";
export function copyRecursive(sourceDirectory, targetDirectory, opts = {
    ignore_node_modules: true
}) {
    if (!existsSync(sourceDirectory)) {
        return false;
    }
    if (opts.ignore_node_modules && sourceDirectory.endsWith("node_modules")) {
        try {
            const targetModulesFolder = targetDirectory;
            mkdirSync(targetModulesFolder, { recursive: true });
            findAndCopyPackageJsonFiles(sourceDirectory, targetModulesFolder);
        }
        catch (e) {
            console.error(e);
        }
        finally {
            return true;
        }
    }
    const stat = statSync(sourceDirectory);
    if (stat.isFile()) {
        if (!existsSync(targetDirectory)) {
            mkdirSync(targetDirectory, { recursive: true });
        }
        const filename = sourceDirectory.split("/").pop();
        copyFileSync(sourceDirectory, targetDirectory + "/" + filename);
        return true;
    }
    targetDirectory += "/" + sourceDirectory.split("/").pop();
    if (!existsSync(targetDirectory)) {
        mkdirSync(targetDirectory, { recursive: true });
    }
    const files = readdirSync(sourceDirectory);
    for (const file of files) {
        const fullPath = sourceDirectory + "/" + file;
        const targetPath = targetDirectory + "/" + file;
        const stat = statSync(fullPath);
        if (stat.isDirectory()) {
            copyRecursive(fullPath, targetPath, opts);
            continue;
        }
        copyFileSync(fullPath, targetPath);
    }
    return true;
}
function findAndCopyPackageJsonFiles(searchDir, targetDir) {
    const files = readdirSync(searchDir);
    let foundPackageJson = false;
    for (const file of files) {
        if (foundPackageJson)
            break;
        const fullPath = searchDir + "/" + file;
        const stat = statSync(fullPath);
        if (stat.isFile()) {
            if (file === "package.json") {
                foundPackageJson = true;
                try {
                    const packageJson = JSON.parse(readFileSync(fullPath, "utf-8"));
                    const packageName = packageJson.name;
                    if (packageName) {
                        let copyFileName = packageName.replaceAll("/", "_");
                        if (packageJson.version)
                            copyFileName += "@" + packageJson.version;
                        copyFileSync(fullPath, targetDir + "/" + copyFileName + ".json");
                    }
                }
                catch (err) {
                    console.error("Failed to copy: " + fullPath, err.message);
                }
            }
            continue;
        }
    }
    if (!foundPackageJson) {
        for (const file of files) {
            const fullPath = searchDir + "/" + file;
            const stat = statSync(fullPath);
            if (stat.isDirectory()) {
                findAndCopyPackageJsonFiles(searchDir + "/" + file, targetDir);
            }
        }
    }
}
export function deleteFolderRecursive(dir) {
    if (!dir)
        return;
    if (!existsSync(dir))
        return;
    const files = readdirSync(dir);
    for (const file of files) {
        const fullPath = dir + "/" + file;
        const stat = statSync(fullPath);
        if (stat.isDirectory()) {
            deleteFolderRecursive(fullPath);
        }
        else {
            unlinkSync(fullPath);
        }
        try {
        }
        catch (err) {
            console.error("Failed to delete: " + fullPath, err.message);
        }
    }
    rmdirSync(dir);
}
export function moveDirectory(dir, target) {
    if (!dir)
        return;
    if (!existsSync(dir))
        return;
    if (!existsSync(target))
        mkdirSync(target, { recursive: true });
    const files = readdirSync(dir);
    for (const file of files) {
        const fullPath = dir + "/" + file;
        const targetPath = target + "/" + file;
        const stat = statSync(fullPath);
        if (stat.isDirectory()) {
            moveDirectory(fullPath, targetPath);
        }
        else {
            copyFileSync(fullPath, targetPath);
            unlinkSync(fullPath);
        }
    }
    if (existsSync(dir))
        rmdirSync(dir);
}
