#!/usr/bin/env node
import { program } from '@donmccurdy/caporal';
import { generateFontAtlas } from '../actions/generate-font-atlas.js';
import packageJson from "#package.json" assert { type: "json" };
import { cloneRepository } from '../actions/git-clone.js';
import { upload_to_ftp } from '../actions/upload-to-ftp.js';
program.version(packageJson.version).description('Command-line interface (CLI) for the Needle Helper');
program
    .command('generate-font-atlas', 'Generate a font atlas')
    .help(`Generates a font atlas for use with Needle Engine given a font file on disc. You can also provide an optional charset file.`.trim())
    .option("--fontPath <fontPath>", "Path to the font file", { required: true })
    .option("--targetDirectory <targetDirectory>", "Path to the target directory", { required: true })
    .option("--charset <charset>", "Charset to use", { required: false })
    .action(({ args, options, logger }) => {
    return generateFontAtlas(options.fontPath.toString(), options.targetDirectory.toString(), options.charset?.toString())
        .catch(err => {
        console.error("Error generating font atlas: ", err);
        process.exit(1);
    })
        .finally(() => {
        console.log("Font atlas generated successfully");
        process.exit(0);
    });
})
    .command('git-clone', 'Clone or download a git repository.')
    .help(`
Clone or download a git repository to a local directory. 
If git is not installed on your system we will fallback to downloading the repository (for github.com)
`.trim())
    .option("--url <url>", "Url to the git repository. If it's a github.com url we support /tree/ and /commit/ urls as well. If your git url contains a ?path= query parameter you can also just clone a specific folder inside of your repository.", { required: true })
    .option("--targetDir <targetDir>", "Path to a local directory where you want your repository to be cloned to.", { required: true })
    .action(({ args, options, logger }) => {
    return cloneRepository(options.url.toString(), options.targetDir.toString())
        .finally(() => {
        process.exit(0);
    });
})
    .command('upload-ftp', 'Upload files to an FTP server')
    .help(`Upload files to an FTP server`.trim())
    .option("--server <server>", "The server to connect to", { required: true })
    .option("--username <username>", "The username to use", { required: true })
    .option("--password <password>", "The password to use", { required: true })
    .option("--localpath <localpath>", "The local path to upload", { required: true })
    .option("--remotepath <remotepath>", "The remote path to upload to", { required: true })
    .option("--port <port>", "The port to use", { required: false })
    .option("--sftp", "Use SFTP instead of FTP", { required: false })
    .option("--delete", "Delete files on the server that are not present locally", { required: false })
    .action(({ args, options, logger }) => {
    const server = options.server.toString();
    const username = options.username.toString();
    const password = options.password.toString();
    const localpath = options.localpath.toString();
    const remotepath = options.remotepath.toString();
    let port = options.port?.valueOf() || (options.sftp?.valueOf() ? 22 : 21);
    if (typeof port === "string")
        port = parseInt(port);
    else if (typeof port !== "number") {
        console.warn("WARN: Port is not a number, using default port 22 for SFTP and 21 for FTP");
        port = (options.sftp?.valueOf() ? 22 : 21);
    }
    let sftp = (options.sftp?.valueOf() || false);
    if (typeof sftp != "boolean")
        sftp = sftp === "true";
    const shouldDelete = options.delete?.valueOf() || false;
    if (typeof shouldDelete != "boolean") {
        throw new Error("Delete flag is not a boolean");
    }
    if (shouldDelete) {
        console.warn("WARN: Files will be deleted on the server that are not present locally");
    }
    return upload_to_ftp(server, username, password, remotepath, localpath, sftp, shouldDelete, port)
        .then(() => {
        process.exit(0);
    });
});
program.run();
