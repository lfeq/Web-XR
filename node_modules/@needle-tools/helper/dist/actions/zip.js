import archiver from 'archiver';
import fs from 'fs';
import path from 'path';
import { log } from '../utils/log.js';
export async function zip(source, target) {
    if (!source || !fs.existsSync(source)) {
        throw new Error("Source directory or file does not exist: " + source);
    }
    if (!target) {
        throw new Error("Target directory or file is not specified");
    }
    const sourceInfo = fs.statSync(source);
    const sourceIsFile = sourceInfo.isFile();
    const targetIsFile = target.endsWith(".zip");
    let targetDirectory = target;
    if (targetIsFile) {
        targetDirectory = path.dirname(target);
        console.log("Target directory: " + targetDirectory);
    }
    // Replace backslashes with forward slashes (we only handle forward slashes below)
    source = source.replaceAll("\\", "/");
    target = target.replaceAll("\\", "/");
    // If the target is a directory, then the source file name is used as the target file name
    if (!targetIsFile) {
        let sourceName = source;
        if (sourceIsFile) {
            sourceName = source.substring(source.lastIndexOf("/") + 1, source.lastIndexOf("."));
        }
        else {
            sourceName = source.substring(source.lastIndexOf("/") + 1);
        }
        target = path.resolve(targetDirectory + "/../" + sourceName);
        console.log("Target file: " + target);
    }
    log("Zipping " + source + " to " + target + " ...");
    const res = await zipDirectory(source, target);
    return res;
}
async function zipDirectory(sourceFileOrDir, outPath) {
    if (sourceFileOrDir.endsWith(".zip")) {
        return sourceFileOrDir;
    }
    sourceFileOrDir = sourceFileOrDir.replaceAll("\\", "/");
    outPath = outPath.replaceAll("\\", "/");
    const startTime = new Date().getTime();
    // If the target zip is in the source directory we want to zip into an intermediate directory
    // to avoid recursively zipping the zip file
    let originalOutPath = outPath;
    let intermediateDir = "";
    if (outPath.startsWith(sourceFileOrDir)) {
        const timestamp = new Date().getTime();
        intermediateDir = path.resolve(sourceFileOrDir + `/../${timestamp.toFixed(0)}`);
        if (!fs.existsSync(intermediateDir)) {
            fs.mkdirSync(intermediateDir);
        }
        outPath = path.resolve(intermediateDir + "/" + outPath.substring(sourceFileOrDir.length + 1));
        console.log("Outpath: " + outPath);
    }
    if (!outPath.endsWith(".zip")) {
        outPath += ".zip";
        originalOutPath += ".zip";
    }
    if (fs.existsSync(outPath))
        fs.unlinkSync(outPath);
    let archive = archiver('zip', { zlib: { level: 6 } });
    const stream = fs.createWriteStream(outPath);
    const isDirectory = fs.lstatSync(sourceFileOrDir).isDirectory();
    if (!isDirectory) {
        const fileName = sourceFileOrDir.substring(sourceFileOrDir.lastIndexOf("/") + 1);
        archive = archive.file(sourceFileOrDir, { name: fileName });
    }
    else {
        // If it's a directory we glob
        archive = archive.glob("**/*", {
            cwd: sourceFileOrDir,
            dot: true,
            ignore: ["node_modules"]
        });
    }
    console.log("Zip \"" + sourceFileOrDir + "\"");
    return new Promise((resolve, reject) => {
        archive
            .on('error', err => reject(err))
            .on('warning', err => console.warn(err))
            .on('progress', (args) => console.log(`Zipping ${args.entries.processed} / ${args.entries.total}: ${(args.fs.processedBytes / 1024 / 1024).toFixed(2)} MB`))
            .pipe(stream);
        stream.on('close', () => {
            if (originalOutPath !== outPath) {
                console.log("Rename " + outPath + " to " + originalOutPath);
                fs.renameSync(outPath, originalOutPath);
            }
            const duration = ((new Date().getTime() - startTime) / 1000).toFixed(1);
            const size = (archive.pointer() / 1024 / 1024).toFixed(2);
            log(`Successfully zipped \"${sourceFileOrDir}\" to \"${outPath}\" in ${duration} sec, ${size} MB`);
            resolve(originalOutPath);
            if (fs.existsSync(intermediateDir)) {
                console.log("Remove intermediate dir " + intermediateDir);
                fs.rmdirSync(intermediateDir);
            }
        });
        archive.finalize();
    });
}
