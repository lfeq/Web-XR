import { getPackageJson, savePackageJson } from "../utils/package-utils.js";
import { exists, getRelative } from "../utils/path-utils.js";
import { isVersion } from "../utils/version-utils.js";
export function addPackages(packageJsonPath, dependencies, devDependencies, peerDependencies) {
    const packageJson = getPackageJson(packageJsonPath);
    if (!packageJson) {
        console.error(`Could not find package.json at ${packageJsonPath}`);
        return false;
    }
    if (dependencies) {
        dependencies.forEach(dependency => {
            if (!dependency.includes(":")) {
                console.error(`Dependencies must be in the format "name:version"`);
                return;
            }
            if (!packageJson.dependencies) {
                packageJson.dependencies = {};
            }
            const [name, version] = getNameAndVersion(dependency);
            if (name && version)
                addPackage(packageJsonPath, packageJson.dependencies, name, version);
        });
    }
    if (devDependencies) {
        devDependencies.forEach(dependency => {
            if (!dependency.includes(":")) {
                console.error(`Dev dependencies must be in the format "name:version"`);
                return;
            }
            if (!packageJson.devDependencies) {
                packageJson.devDependencies = {};
            }
            const [name, version] = getNameAndVersion(dependency);
            if (name && version)
                addPackage(packageJsonPath, packageJson.devDependencies, name, version);
        });
    }
    if (peerDependencies) {
        peerDependencies.forEach(dependency => {
            if (!dependency.includes(":")) {
                console.error(`Peer dependencies must be in the format "name:version"`);
                return;
            }
            if (!packageJson.peerDependencies) {
                packageJson.peerDependencies = {};
            }
            const [name, version] = getNameAndVersion(dependency);
            if (name && version)
                addPackage(packageJsonPath, packageJson.peerDependencies, name, version);
        });
    }
    // write package json  
    savePackageJson(packageJsonPath, packageJson);
    return true;
}
function getNameAndVersion(nameAndVersion) {
    const index = nameAndVersion.indexOf(":");
    if (index === -1) {
        return [nameAndVersion, undefined];
    }
    return [nameAndVersion.substring(0, index), nameAndVersion.substring(index + 1)];
}
function addPackage(dirOrFilePath, dict, packageName, packageVersionOrPath) {
    if (isVersion(packageVersionOrPath)) {
        dict[packageName] = packageVersionOrPath;
    }
    else {
        packageVersionOrPath = getRelative(dirOrFilePath, packageVersionOrPath);
        if (!exists(packageVersionOrPath)) {
            console.warn(`WARN: Could not find package at ${packageVersionOrPath}`);
        }
        dict[packageName] = `file:${packageVersionOrPath}`;
    }
    console.log("Added \"" + packageName + "\" as \"" + dict[packageName] + "\"");
}
