import { existsSync, readFileSync, unlinkSync } from 'fs';
import { basename } from 'path';
import { zip } from './zip.js';
import { log, error } from '../utils/log.js';
import { createHash } from 'crypto';
import fetch from "node-fetch";
export async function uploadBugReport(url, file, source, user, description) {
    if (!existsSync(file)) {
        error("File does not exist: " + file);
        return;
    }
    const wasZipped = file.endsWith(".zip");
    const sourcePath = file;
    const zippedPath = wasZipped ? file : await zip(file, file);
    if (!zippedPath) {
        error("Failed to zip file: " + file);
        return;
    }
    if (!existsSync(zippedPath)) {
        error("Zip does not exist at: " + zippedPath);
        return;
    }
    const fileBytes = readFileSync(zippedPath);
    const fileName = basename(zippedPath);
    // TODO calculating md5 for zip results in invalid checksum
    const fileMD5 = wasZipped ? undefined : createHash("md5").update(fileBytes).digest("base64");
    log(`Requesting upload of ${(fileBytes.length / (1024 * 1024)).toFixed(1)} MB ...`);
    let name = basename(file);
    if (!name.endsWith(".zip"))
        name += ".zip";
    const { uploadUrl, key, headers } = await getUploadUrl(url, name, { md5: fileMD5, source, user });
    try {
        return new Promise(async (resolve, _) => {
            log(`Uploading: ${file}...`);
            // // upload with post request
            const res = await fetch(uploadUrl, {
                method: 'PUT',
                body: fileBytes,
                headers: headers,
            });
            if (res.status !== 200) {
                error("Failed to upload file: " + fileName);
                const text = await res.text();
                error("Status: " + res.status);
                if (text.includes("<Message>")) {
                    error(text.substring(text.indexOf("<Message>") + "<Message>".length, text.indexOf("</Message>")));
                }
                else {
                    error(text);
                }
            }
            else {
                log("Successfully uploaded file: " + fileName);
                log("Submitting bug report...");
                const success = await submitBugReport(url, key, name, fileBytes.length, source, user, description);
                if (success) {
                    log("Successfully submitted bug report");
                }
                else
                    error("Failed to submit bug report");
                return resolve(success);
            }
            return resolve(false);
        });
    }
    catch (err) {
        if (err.response?.data?.message)
            error(err.response.data.message);
        else
            error('Error uploading:' + err);
    }
    finally {
        if (sourcePath.replaceAll("\\", "/") !== zippedPath.replaceAll("\\", "/") && existsSync(zippedPath)) {
            console.log("Cleanup...");
            unlinkSync(zippedPath);
        }
    }
}
async function getUploadUrl(endpoint, fileName, parameters) {
    let url = endpoint + "/request-upload-url?name=" + fileName;
    if (parameters) {
        for (const key of Object.keys(parameters)) {
            const value = parameters[key];
            if (value !== undefined && value !== null)
                url += "&" + key + "=" + value;
        }
    }
    const response = await fetch(url);
    const data = await response.json();
    return data;
}
async function submitBugReport(endpoint, fileId, fileName, size, source, user, description) {
    let url = endpoint + "/submit?id=" + fileId + "&name=" + fileName + "&size=" + size;
    if (source)
        url += "&source=" + source;
    if (user)
        url += "&user=" + user;
    if (description) {
        // make sure the description is URL encoded
        if (description.includes("%")) {
            // it's already URL encoded
        }
        else {
            description = encodeURIComponent(description);
        }
        url += "&description=" + description;
    }
    console.log(url);
    const response = await fetch(url);
    if (response.status !== 200) {
        error("Failed to submit bug report: " + response.status);
        return false;
    }
    return true;
}
