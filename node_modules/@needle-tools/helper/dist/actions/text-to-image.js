import { existsSync, mkdirSync, readFileSync } from "fs";
import { UltimateTextToImage, getCanvasImage } from "ultimate-text-to-image";
import { error, warning } from "../utils/log.js";
// registerFont(process.cwd() + "/assets/OpenSans-VariableFont.otf", { family: "OS", weight: "400" });
export async function generateUnfurlImage(title, subtext, backgroundImage = "", targetPath) {
    try {
        if (!targetPath.includes(".")) {
            error("Target path must include a file extension: " + targetPath);
            return;
        }
        const unfurlImageHeight = 630;
        const unfurlImageWidth = 1200;
        const baseOptions = {
            fontFamily: "Arial, Sans",
            fontColor: "#ffffff",
            minFontSize: 20,
            fontSize: 600,
            useGlyphPadding: true,
            images: [],
        };
        const titleImg = new UltimateTextToImage(title, {
            ...baseOptions,
            fontSize: 120,
            maxWidth: 930,
            maxHeight: 200,
            lineHeightMultiplier: 1,
            fontWeight: "bold",
        });
        const titleRendered = titleImg.render();
        const titleWidth = titleImg.measuredParagraph.width;
        const titleHeight = titleImg.measuredParagraph.height;
        const titleY = 100;
        const subtextImg = new UltimateTextToImage(subtext, {
            ...baseOptions,
            fontSize: 36,
            maxWidth: 950,
            maxHeight: unfurlImageHeight - (100 + titleY + titleHeight),
            lineHeightMultiplier: 1.2,
        });
        const margin = 100;
        const unfurlImages = [];
        if (backgroundImage) {
            if (existsSync(backgroundImage)) {
                unfurlImages.push({
                    canvasImage: await getCanvasImage({ buffer: readFileSync(backgroundImage) }),
                    layer: 0,
                    repeat: "fit"
                });
            }
            else {
                warning(`Background image not found: ${backgroundImage}`);
            }
        }
        const unfurl = new UltimateTextToImage("", {
            width: unfurlImageWidth,
            height: unfurlImageHeight,
            margin: margin,
            images: [
                ...unfurlImages,
                {
                    canvasImage: await getCanvasImage({ buffer: titleRendered.toBuffer() }),
                    layer: 1,
                    x: margin,
                    y: titleY,
                },
                {
                    canvasImage: await getCanvasImage({ buffer: subtextImg.render().toBuffer() }),
                    layer: 1,
                    x: margin + 6,
                    y: titleY + titleHeight + 12,
                }
            ]
        });
        // Make sure the directory exists
        targetPath = targetPath.replace(/\\/g, "/");
        const directory = targetPath.split("/").slice(0, -1).join("/");
        if (directory) {
            mkdirSync(directory, { recursive: true });
        }
        const rendered = unfurl.render();
        rendered.toFile(targetPath);
        console.log("Unfurl image generated at " + targetPath);
    }
    catch (e) {
        error(e.message ?? e);
    }
}
