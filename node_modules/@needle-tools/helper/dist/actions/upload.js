import * as fs from "fs";
import FormData from "form-data";
import fetch from 'node-fetch';
import { error, warning } from "../utils/log.js";
import { openUrlInDefaultBrowser } from "../utils/url.js";
export async function upload_to_glitch(file, endpoint, deploymentKey, openUrl) {
    endpoint = convertToGlitchUrl(endpoint);
    const glitchMe = endpoint;
    endpoint += "/v1/deploy";
    // const form = new URLSearchParams();
    // TODO: https://github.com/node-fetch/node-fetch/issues/1167
    const form = new FormData();
    const stats = fs.statSync(file);
    const fileSizeInBytes = stats.size;
    const fileStream = fs.createReadStream(file);
    form.append('zip', fileStream, {
        filename: file,
        knownLength: fileSizeInBytes,
    });
    const headers = {
        "deployment_key": deploymentKey,
        "zip_length": fileSizeInBytes.toString(),
    };
    const res = await upload_POST(file, endpoint, form, headers);
    if (!res) {
        console.log("Failed to upload to Glitch → " + glitchMe);
        return await new Promise(resolve => setTimeout(() => resolve(false), 2000));
    }
    if (openUrl) {
        // give glitch a moment...
        await new Promise((resolve) => {
            setTimeout(() => {
                console.log("Opening Glitch project in default browser → " + glitchMe);
                resolve(true);
                openUrlInDefaultBrowser(glitchMe);
            }, 1000);
        });
    }
    else {
        console.log("Uploaded to Glitch → " + glitchMe);
    }
    return res;
}
export async function upload_POST(file, endpoint, form, headers) {
    console.log(`Uploading file \"${file}\" to \"${endpoint}\" ...`);
    // post the file to the server
    const res = await fetch(endpoint, {
        method: "POST",
        headers: headers,
        body: form,
    });
    if (res.status !== 200) {
        let message = await res.text();
        if (message.startsWith("{"))
            message = JSON.parse(message).message;
        error("UPLOAD FAILED: " + res.status + " " + message);
        return false;
    }
    console.log("Upload successful to " + endpoint);
    return true;
}
function convertToGlitchUrl(url) {
    if (url.includes("glitch.com/edit/#!/")) {
        // https://regex101.com/r/SwboNz/3
        const regex = /glitch\.com\/edit\/#!\/(?<project_name>.*?)(\?|$)/;
        const name = url.match(regex)?.groups?.project_name;
        return `https://${name}.glitch.me`;
    }
    else if (!url.includes("glitch.com") && !url.includes("glitch.me")) {
        const projectUrl = `https://${url}.glitch.me`;
        warning("Glitch URL does not contain 'glitch.com' or 'glitch.me'. Assuming it is a project name: " + projectUrl);
        return projectUrl;
    }
    return url;
}
function tryGetContentType(file) {
    if (file.endsWith(".json"))
        return "application/json";
    if (file.endsWith(".zip"))
        return "application/zip";
    return "application/octet-stream";
}
