import { FrameEvent } from "./engine_context.js";
import { ContextEvent } from "./engine_context_registry.js";
import { registerFrameEventCallback, unregisterFrameEventCallback } from "./engine_lifecycle_functions_internal.js";
/**
 * Register a callback in the engine context created event.
 * This happens once per context (after the context has been created and the first content has been loaded)
 * @param cb The callback to be called
 * @returns A function that can be called to unregister the callback
 * @example
 * ```ts
 * onInitialized((ctx : Context) => {
 *     // do something
 * }
 * ```
 * */
export function onInitialized(cb, opts) {
    registerFrameEventCallback(cb, ContextEvent.ContextCreated, opts);
    return () => unregisterFrameEventCallback(cb, ContextEvent.ContextCreated);
}
/**
 * Register a callback before the engine context is cleared.
 * This happens if e.g. `<needle-engine src>` changes
 */
export function onClear(cb, opts) {
    registerFrameEventCallback(cb, ContextEvent.ContextClearing, opts);
    return () => unregisterFrameEventCallback(cb, ContextEvent.ContextClearing);
}
/**
 * Register a callback in the engine before the context is destroyed
 * This happens once per context (before the context is destroyed)
 */
export function onDestroy(cb, opts) {
    registerFrameEventCallback(cb, ContextEvent.ContextDestroying, opts);
    return () => unregisterFrameEventCallback(cb, ContextEvent.ContextDestroying);
}
/** Register a callback in the engine start event.
 * This happens at the beginning of each frame
 * @param cb The callback to be called
 * @returns A function that can be called to unregister the callback
 * @example
 * ```ts
 * onStart((ctx : Context) => {
 *     // do something
 * }
 * ```
 * */
export function onStart(cb, opts) {
    registerFrameEventCallback(cb, FrameEvent.Start, opts);
    return () => unregisterFrameEventCallback(cb, FrameEvent.Start);
}
/** Register a callback in the engine update event
 * This is called every frame
 * @param cb The callback to be called
 * @returns A function that can be called to unregister the callback
 * @example
 * ```ts
 * onUpdate((ctx : Context) => {
 *     // do something
 * }
 * ```
 * */
export function onUpdate(cb, opts) {
    registerFrameEventCallback(cb, FrameEvent.Update, opts);
    return () => unregisterFrameEventCallback(cb, FrameEvent.Update);
}
/** Register a callback in the engine onBeforeRender event
 * This is called every frame before the main camera renders
 * @param cb The callback to be called
 * @returns A function that can be called to unregister the callback
 * @example
 * ```ts
 * onBeforeRender((ctx : Context) => {
 *     // do something
 * }
 * ```
 * */
export function onBeforeRender(cb, opts) {
    registerFrameEventCallback(cb, FrameEvent.OnBeforeRender, opts);
    return () => unregisterFrameEventCallback(cb, FrameEvent.OnBeforeRender);
}
/**
 * Register a callback in the engine onAfterRender event
 * This is called every frame after the main camera has rendered
 * @param cb The callback to be called
 * @returns A function that can be called to unregister the callback
 * @example
 * ```ts
 * const unsubscribe = onAfterRender((ctx : Context) => {
 *    // do something...
 *    console.log("After render");
 *    // if you want to unsubscribe after the first call:
 *    unsubscribe();
 * });
 * ```
 */
export function onAfterRender(cb, opts) {
    registerFrameEventCallback(cb, FrameEvent.OnAfterRender, opts);
    return () => unregisterFrameEventCallback(cb, FrameEvent.OnAfterRender);
}
//# sourceMappingURL=engine_lifecycle_api.js.map