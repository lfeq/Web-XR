var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { PixelationEffect as PixelationEffectPP } from "postprocessing";
import { serializable } from "../../../engine/engine_serialization.js";
import { PostProcessingEffect } from "../PostProcessingEffect.js";
import { VolumeParameter } from "../VolumeParameter.js";
import { registerCustomEffectType } from "../VolumeProfile.js";
/**
 * @category Effects
 * @group Components
 */
export class PixelationEffect extends PostProcessingEffect {
    get typeName() {
        return "PixelationEffect";
    }
    granularity = new VolumeParameter(10);
    onCreateEffect() {
        const effect = new PixelationEffectPP();
        this.granularity.onValueChanged = v => {
            effect.granularity = v;
        };
        return effect;
    }
}
__decorate([
    serializable(VolumeParameter)
], PixelationEffect.prototype, "granularity", void 0);
registerCustomEffectType("PixelationEffect", PixelationEffect);
//# sourceMappingURL=Pixelation.js.map