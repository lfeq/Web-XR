// automatically generated by the FlatBuffers compiler, do not modify
import * as flatbuffers from 'flatbuffers';
import { Vec3 } from './vec3.js';
import { Vec4 } from './vec4.js';
export class VrUserStateBuffer {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsVrUserStateBuffer(bb, obj) {
        return (obj || new VrUserStateBuffer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsVrUserStateBuffer(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new VrUserStateBuffer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    time() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);
    }
    avatarId(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    position(obj) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? (obj || new Vec3()).__init(this.bb_pos + offset, this.bb) : null;
    }
    rotation(obj) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? (obj || new Vec4()).__init(this.bb_pos + offset, this.bb) : null;
    }
    scale() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    headPosition(obj) {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? (obj || new Vec3()).__init(this.bb_pos + offset, this.bb) : null;
    }
    headRotation(obj) {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? (obj || new Vec4()).__init(this.bb_pos + offset, this.bb) : null;
    }
    posLeftHand(obj) {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? (obj || new Vec3()).__init(this.bb_pos + offset, this.bb) : null;
    }
    posRightHand(obj) {
        const offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? (obj || new Vec3()).__init(this.bb_pos + offset, this.bb) : null;
    }
    rotLeftHand(obj) {
        const offset = this.bb.__offset(this.bb_pos, 22);
        return offset ? (obj || new Vec4()).__init(this.bb_pos + offset, this.bb) : null;
    }
    rotRightHand(obj) {
        const offset = this.bb.__offset(this.bb_pos, 24);
        return offset ? (obj || new Vec4()).__init(this.bb_pos + offset, this.bb) : null;
    }
    static startVrUserStateBuffer(builder) {
        builder.startObject(11);
    }
    static addTime(builder, time) {
        builder.addFieldInt64(0, time, builder.createLong(0, 0));
    }
    static addAvatarId(builder, avatarIdOffset) {
        builder.addFieldOffset(1, avatarIdOffset, 0);
    }
    static addPosition(builder, positionOffset) {
        builder.addFieldStruct(2, positionOffset, 0);
    }
    static addRotation(builder, rotationOffset) {
        builder.addFieldStruct(3, rotationOffset, 0);
    }
    static addScale(builder, scale) {
        builder.addFieldFloat32(4, scale, 0.0);
    }
    static addHeadPosition(builder, headPositionOffset) {
        builder.addFieldStruct(5, headPositionOffset, 0);
    }
    static addHeadRotation(builder, headRotationOffset) {
        builder.addFieldStruct(6, headRotationOffset, 0);
    }
    static addPosLeftHand(builder, posLeftHandOffset) {
        builder.addFieldStruct(7, posLeftHandOffset, 0);
    }
    static addPosRightHand(builder, posRightHandOffset) {
        builder.addFieldStruct(8, posRightHandOffset, 0);
    }
    static addRotLeftHand(builder, rotLeftHandOffset) {
        builder.addFieldStruct(9, rotLeftHandOffset, 0);
    }
    static addRotRightHand(builder, rotRightHandOffset) {
        builder.addFieldStruct(10, rotRightHandOffset, 0);
    }
    static endVrUserStateBuffer(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static finishVrUserStateBufferBuffer(builder, offset) {
        builder.finish(offset);
    }
    static finishSizePrefixedVrUserStateBufferBuffer(builder, offset) {
        builder.finish(offset, undefined, true);
    }
}
//# sourceMappingURL=vr-user-state-buffer.js.map