// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Vec3 } from './vec3.js';
import { Vec4 } from './vec4.js';


export class VrUserStateBuffer {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):VrUserStateBuffer {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsVrUserStateBuffer(bb:flatbuffers.ByteBuffer, obj?:VrUserStateBuffer):VrUserStateBuffer {
  return (obj || new VrUserStateBuffer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsVrUserStateBuffer(bb:flatbuffers.ByteBuffer, obj?:VrUserStateBuffer):VrUserStateBuffer {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new VrUserStateBuffer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

time():flatbuffers.Long {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);
}

avatarId():string|null
avatarId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
avatarId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

position(obj?:Vec3):Vec3|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new Vec3()).__init(this.bb_pos + offset, this.bb!) : null;
}

rotation(obj?:Vec4):Vec4|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new Vec4()).__init(this.bb_pos + offset, this.bb!) : null;
}

scale():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

headPosition(obj?:Vec3):Vec3|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new Vec3()).__init(this.bb_pos + offset, this.bb!) : null;
}

headRotation(obj?:Vec4):Vec4|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? (obj || new Vec4()).__init(this.bb_pos + offset, this.bb!) : null;
}

posLeftHand(obj?:Vec3):Vec3|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? (obj || new Vec3()).__init(this.bb_pos + offset, this.bb!) : null;
}

posRightHand(obj?:Vec3):Vec3|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? (obj || new Vec3()).__init(this.bb_pos + offset, this.bb!) : null;
}

rotLeftHand(obj?:Vec4):Vec4|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? (obj || new Vec4()).__init(this.bb_pos + offset, this.bb!) : null;
}

rotRightHand(obj?:Vec4):Vec4|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? (obj || new Vec4()).__init(this.bb_pos + offset, this.bb!) : null;
}

static startVrUserStateBuffer(builder:flatbuffers.Builder) {
  builder.startObject(11);
}

static addTime(builder:flatbuffers.Builder, time:flatbuffers.Long) {
  builder.addFieldInt64(0, time, builder.createLong(0, 0));
}

static addAvatarId(builder:flatbuffers.Builder, avatarIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, avatarIdOffset, 0);
}

static addPosition(builder:flatbuffers.Builder, positionOffset:flatbuffers.Offset) {
  builder.addFieldStruct(2, positionOffset, 0);
}

static addRotation(builder:flatbuffers.Builder, rotationOffset:flatbuffers.Offset) {
  builder.addFieldStruct(3, rotationOffset, 0);
}

static addScale(builder:flatbuffers.Builder, scale:number) {
  builder.addFieldFloat32(4, scale, 0.0);
}

static addHeadPosition(builder:flatbuffers.Builder, headPositionOffset:flatbuffers.Offset) {
  builder.addFieldStruct(5, headPositionOffset, 0);
}

static addHeadRotation(builder:flatbuffers.Builder, headRotationOffset:flatbuffers.Offset) {
  builder.addFieldStruct(6, headRotationOffset, 0);
}

static addPosLeftHand(builder:flatbuffers.Builder, posLeftHandOffset:flatbuffers.Offset) {
  builder.addFieldStruct(7, posLeftHandOffset, 0);
}

static addPosRightHand(builder:flatbuffers.Builder, posRightHandOffset:flatbuffers.Offset) {
  builder.addFieldStruct(8, posRightHandOffset, 0);
}

static addRotLeftHand(builder:flatbuffers.Builder, rotLeftHandOffset:flatbuffers.Offset) {
  builder.addFieldStruct(9, rotLeftHandOffset, 0);
}

static addRotRightHand(builder:flatbuffers.Builder, rotRightHandOffset:flatbuffers.Offset) {
  builder.addFieldStruct(10, rotRightHandOffset, 0);
}

static endVrUserStateBuffer(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishVrUserStateBufferBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedVrUserStateBufferBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

}
