"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
exports.__esModule = true;
exports.SyncedTransformModel = void 0;
var flatbuffers = require("flatbuffers");
var transform_js_1 = require("./transform.js");
var SyncedTransformModel = /** @class */ (function () {
    function SyncedTransformModel() {
        this.bb = null;
        this.bb_pos = 0;
    }
    SyncedTransformModel.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    SyncedTransformModel.getRootAsSyncedTransformModel = function (bb, obj) {
        return (obj || new SyncedTransformModel()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    SyncedTransformModel.getSizePrefixedRootAsSyncedTransformModel = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new SyncedTransformModel()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    SyncedTransformModel.prototype.guid = function (optionalEncoding) {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    };
    /**
     * if the transform interpolation should be fast, this is true when the send interval is low and we want to have snappy transforms
     */
    SyncedTransformModel.prototype.fast = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    };
    SyncedTransformModel.prototype.transform = function (obj) {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? (obj || new transform_js_1.Transform()).__init(this.bb_pos + offset, this.bb) : null;
    };
    /**
     * if the server should not save this info
     */
    SyncedTransformModel.prototype.dontSave = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    };
    SyncedTransformModel.startSyncedTransformModel = function (builder) {
        builder.startObject(4);
    };
    SyncedTransformModel.addGuid = function (builder, guidOffset) {
        builder.addFieldOffset(0, guidOffset, 0);
    };
    SyncedTransformModel.addFast = function (builder, fast) {
        builder.addFieldInt8(1, +fast, +false);
    };
    SyncedTransformModel.addTransform = function (builder, transformOffset) {
        builder.addFieldStruct(2, transformOffset, 0);
    };
    SyncedTransformModel.addDontSave = function (builder, dontSave) {
        builder.addFieldInt8(3, +dontSave, +false);
    };
    SyncedTransformModel.endSyncedTransformModel = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    SyncedTransformModel.finishSyncedTransformModelBuffer = function (builder, offset) {
        builder.finish(offset);
    };
    SyncedTransformModel.finishSizePrefixedSyncedTransformModelBuffer = function (builder, offset) {
        builder.finish(offset, undefined, true);
    };
    return SyncedTransformModel;
}());
exports.SyncedTransformModel = SyncedTransformModel;
