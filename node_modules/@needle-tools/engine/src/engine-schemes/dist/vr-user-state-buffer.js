"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
exports.__esModule = true;
exports.VrUserStateBuffer = void 0;
var flatbuffers = require("flatbuffers");
var vec3_js_1 = require("./vec3.js");
var vec4_js_1 = require("./vec4.js");
var VrUserStateBuffer = /** @class */ (function () {
    function VrUserStateBuffer() {
        this.bb = null;
        this.bb_pos = 0;
    }
    VrUserStateBuffer.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    VrUserStateBuffer.getRootAsVrUserStateBuffer = function (bb, obj) {
        return (obj || new VrUserStateBuffer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    VrUserStateBuffer.getSizePrefixedRootAsVrUserStateBuffer = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new VrUserStateBuffer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    VrUserStateBuffer.prototype.guid = function (optionalEncoding) {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    };
    VrUserStateBuffer.prototype.time = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);
    };
    VrUserStateBuffer.prototype.avatarId = function (optionalEncoding) {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    };
    VrUserStateBuffer.prototype.position = function (obj) {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? (obj || new vec3_js_1.Vec3()).__init(this.bb_pos + offset, this.bb) : null;
    };
    VrUserStateBuffer.prototype.rotation = function (obj) {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? (obj || new vec4_js_1.Vec4()).__init(this.bb_pos + offset, this.bb) : null;
    };
    VrUserStateBuffer.prototype.scale = function () {
        var offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    };
    VrUserStateBuffer.prototype.posLeftHand = function (obj) {
        var offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? (obj || new vec3_js_1.Vec3()).__init(this.bb_pos + offset, this.bb) : null;
    };
    VrUserStateBuffer.prototype.posRightHand = function (obj) {
        var offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? (obj || new vec3_js_1.Vec3()).__init(this.bb_pos + offset, this.bb) : null;
    };
    VrUserStateBuffer.prototype.rotLeftHand = function (obj) {
        var offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? (obj || new vec4_js_1.Vec4()).__init(this.bb_pos + offset, this.bb) : null;
    };
    VrUserStateBuffer.prototype.rotRightHand = function (obj) {
        var offset = this.bb.__offset(this.bb_pos, 22);
        return offset ? (obj || new vec4_js_1.Vec4()).__init(this.bb_pos + offset, this.bb) : null;
    };
    VrUserStateBuffer.startVrUserStateBuffer = function (builder) {
        builder.startObject(10);
    };
    VrUserStateBuffer.addGuid = function (builder, guidOffset) {
        builder.addFieldOffset(0, guidOffset, 0);
    };
    VrUserStateBuffer.addTime = function (builder, time) {
        builder.addFieldInt64(1, time, builder.createLong(0, 0));
    };
    VrUserStateBuffer.addAvatarId = function (builder, avatarIdOffset) {
        builder.addFieldOffset(2, avatarIdOffset, 0);
    };
    VrUserStateBuffer.addPosition = function (builder, positionOffset) {
        builder.addFieldStruct(3, positionOffset, 0);
    };
    VrUserStateBuffer.addRotation = function (builder, rotationOffset) {
        builder.addFieldStruct(4, rotationOffset, 0);
    };
    VrUserStateBuffer.addScale = function (builder, scale) {
        builder.addFieldFloat32(5, scale, 0.0);
    };
    VrUserStateBuffer.addPosLeftHand = function (builder, posLeftHandOffset) {
        builder.addFieldStruct(6, posLeftHandOffset, 0);
    };
    VrUserStateBuffer.addPosRightHand = function (builder, posRightHandOffset) {
        builder.addFieldStruct(7, posRightHandOffset, 0);
    };
    VrUserStateBuffer.addRotLeftHand = function (builder, rotLeftHandOffset) {
        builder.addFieldStruct(8, rotLeftHandOffset, 0);
    };
    VrUserStateBuffer.addRotRightHand = function (builder, rotRightHandOffset) {
        builder.addFieldStruct(9, rotRightHandOffset, 0);
    };
    VrUserStateBuffer.endVrUserStateBuffer = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    VrUserStateBuffer.finishVrUserStateBufferBuffer = function (builder, offset) {
        builder.finish(offset);
    };
    VrUserStateBuffer.finishSizePrefixedVrUserStateBufferBuffer = function (builder, offset) {
        builder.finish(offset, undefined, true);
    };
    return VrUserStateBuffer;
}());
exports.VrUserStateBuffer = VrUserStateBuffer;
