import { KernelSize, TiltShiftEffect as TiltShift } from "postprocessing";

import { serializable } from "../../../engine/engine_serialization.js";
import { type EffectProviderResult, PostProcessingEffect } from "../PostProcessingEffect.js";
import { VolumeParameter } from "../VolumeParameter.js";
import { registerCustomEffectType } from "../VolumeProfile.js";

/**
 * @category Effects
 * @group Components
 */
export class TiltShiftEffect extends PostProcessingEffect {
    get typeName(): string {
        return "TiltShiftEffect";
    }

    @serializable(VolumeParameter)
    offset: VolumeParameter = new VolumeParameter(0);
    @serializable(VolumeParameter)
    rotation: VolumeParameter = new VolumeParameter(0);
    @serializable(VolumeParameter)
    focusArea: VolumeParameter = new VolumeParameter(0.4);
    @serializable(VolumeParameter)
    feather: VolumeParameter = new VolumeParameter(0.3);
    @serializable(VolumeParameter)
    kernelSize: VolumeParameter = new VolumeParameter(KernelSize.MEDIUM);
    @serializable(VolumeParameter)
    resolutionScale: VolumeParameter = new VolumeParameter(1 / window.devicePixelRatio);

    init(): void {
        this.offset.defaultValue = 0;
        this.rotation.defaultValue = 0;
        this.focusArea.defaultValue = 0.4;
        this.feather.defaultValue = 0.3;
        this.kernelSize.defaultValue = KernelSize.MEDIUM;
        this.resolutionScale.defaultValue = 1 / window.devicePixelRatio;
    }


    onCreateEffect(): EffectProviderResult | undefined {

        const effect = new TiltShift({
            kernelSize: KernelSize.VERY_LARGE,
            offset: this.offset.value,
            rotation: this.rotation.value,
            focusArea: this.focusArea.value,
            feather: this.feather.value,
        });

        this.offset.onValueChanged = v => effect.offset = v;
        this.rotation.onValueChanged = v => effect.rotation = v;
        this.focusArea.onValueChanged = v => effect.focusArea = v;
        this.feather.onValueChanged = v => effect.feather = v;
        this.kernelSize.onValueChanged = v => effect.blurPass.kernelSize = v;
        this.resolutionScale.onValueChanged = v => effect.resolution.scale = v / window.devicePixelRatio;


        return effect;
    }

}
registerCustomEffectType("TiltShiftEffect", TiltShiftEffect);