import { ChromaticAberrationEffect } from "postprocessing";
import { Vector2 } from "three";

import { serializable } from "../../../engine/engine_serialization.js";
import { type EffectProviderResult, PostProcessingEffect } from "../PostProcessingEffect.js";
import { VolumeParameter } from "../VolumeParameter.js";
import { registerCustomEffectType, VolumeProfile } from "../VolumeProfile.js";

/**
 * @category Effects
 * @group Components
 */
export class ChromaticAberration extends PostProcessingEffect {

    get typeName() {
        return "ChromaticAberration";
    }

    @serializable(VolumeParameter)
    readonly intensity: VolumeParameter = new VolumeParameter(0);


    onCreateEffect(): EffectProviderResult {
        const chromatic = new ChromaticAberrationEffect();
        chromatic.offset = new Vector2(0, 0)
        chromatic.radialModulation = true;
        chromatic.modulationOffset = .15;
        this.intensity.valueProcessor = v => v * .02;
        this.intensity.onValueChanged = v => {
            chromatic.offset.x = -v;
            chromatic.offset.y = v;
        }
        return chromatic;
    }

};

registerCustomEffectType("ChromaticAberration", ChromaticAberration);